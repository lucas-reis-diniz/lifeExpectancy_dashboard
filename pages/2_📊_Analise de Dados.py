import streamlit as st
import pandas as pd
import plotly.express as px
from scipy.stats import t
import plotly.graph_objects as go

st.set_page_config(page_title="An√°lise dos Dados", layout="wide")

st.title("An√°lise dos Dados")

st.markdown("""
### üè• Sobre este Projeto  
Este projeto analisa a **expectativa de vida mundial** ao longo dos anos, explorando como diferentes fatores impactam a longevidade em diversas regi√µes.  

üìå **Por que escolhemos este dataset?**  
- A expectativa de vida √© um **indicador chave do desenvolvimento humano**.  
- Permite **comparar pa√≠ses e analisar tend√™ncias ao longo do tempo**.  
- Podemos investigar **o impacto de fatores como sa√∫de, economia e pol√≠ticas p√∫blicas**.  

üìå **Impacto desta an√°lise**  
- Compreender padr√µes globais pode ajudar governos e ONGs a **tomar decis√µes baseadas em dados**.  
- Pode revelar **desigualdades regionais e fatores que contribuem para maior longevidade**.  
""")

@st.cache_data
def load_data():
    df = pd.read_csv("LifeExpectancy.csv")
    return df

df = load_data()

t.subheader("üìä Estat√≠sticas Descritivas")

st.markdown("""
Aqui temos um **resumo estat√≠stico das vari√°veis num√©ricas** do dataset.  
Essa tabela nos mostra medidas importantes, como:  

- **M√©dia**: Valor m√©dio da expectativa de vida e outras vari√°veis.  
- **Desvio Padr√£o**: Indica o qu√£o dispersos os dados est√£o em rela√ß√£o √† m√©dia.  
- **M√≠nimo e M√°ximo**: Valores extremos observados no dataset.  
- **Quartis (25%, 50%, 75%)**: Dividem os dados em percentis, ajudando a entender a distribui√ß√£o.  
""")

st.write(df.describe())

st.markdown("""
üìå **Principais observa√ß√µes:**  
- A **m√©dia da expectativa de vida** √© aproximadamente **X anos** (*substituir pelo valor real*).  
- O **desvio padr√£o** mostra que os dados variam consideravelmente entre pa√≠ses.  
- O **percentil 25%** indica que **25% dos pa√≠ses t√™m uma expectativa de vida abaixo de Y anos**.  
- O **percentil 75%** mostra que **os 25% com maior expectativa de vida est√£o acima de Z anos**.  

Essas estat√≠sticas nos ajudam a compreender **a dispers√£o dos dados e padr√µes gerais**, o que ser√° √∫til para as pr√≥ximas an√°lises.  
""")

st.subheader("Classifica√ß√£o das Vari√°veis")

data_types = {
    "Country": "Qualitativo Nominal",
    "Year": "Quantitativo Discreto",
    "Status": "Qualitativo Nominal",
    "Life expectancy": "Quantitativo Cont√≠nuo",
    "Adult Mortality": "Quantitativo Cont√≠nuo",
    "infant deaths": "Quantitativo Discreto",
    "Alcohol": "Quantitativo Cont√≠nuo",
    "Hepatitis B": "Quantitativo Discreto",
    "Measles": "Quantitativo Discreto",
    "BMI": "Quantitativo Cont√≠nuo",
    "Under-five deaths": "Quantitativo Discreto",
    "Polio": "Quantitativo Discreto",
    "Total expenditure": "Quantitativo Cont√≠nuo",
    "Diphtheria": "Quantitativo Discreto",
    "HIV/AIDS": "Quantitativo Cont√≠nuo",
    "GDP": "Quantitativo Cont√≠nuo",
    "Population": "Quantitativo Discreto",
    "Thinness 1-19 years": "Quantitativo Cont√≠nuo",
    "Thinness 5-9 years": "Quantitativo Cont√≠nuo",
    "Income composition of resources": "Quantitativo Cont√≠nuo",
    "Schooling": "Quantitativo Cont√≠nuo",
}

df_types = pd.DataFrame(list(data_types.items()), columns=["Vari√°vel", "Tipo de Dado"])
st.write(df_types)

st.subheader("Perguntas que podemos responder com esses dados")

st.markdown("""
- Qual √© a expectativa de vida m√©dia global?
- Como a expectativa de vida mudou ao longo dos anos em diferentes pa√≠ses?
- Pa√≠ses desenvolvidos t√™m uma expectativa de vida maior do que os em desenvolvimento?
- Existe uma rela√ß√£o entre PIB e expectativa de vida?
- Como os √≠ndices de vacina√ß√£o impactam a expectativa de vida?
- Qual √© a taxa de mortalidade infantil nos pa√≠ses com menor expectativa de vida?
""")

st.subheader("Distribui√ß√£o da Expectativa de Vida")

fig = px.histogram(df, x="Life expectancy", nbins=30, title="Histograma da Expectativa de Vida",
                   labels={"Life expectancy": "Expectativa de Vida"}, opacity=0.7, marginal="box")
st.plotly_chart(fig)

st.subheader("Expectativa de Vida Por Pa√≠s")

country = st.selectbox("Selecione um pa√≠s:", df["Country"].unique())

df_country = df[df["Country"] == country]

fig = px.line(df_country, x="Year", y="Life expectancy", markers=True,
              title=f"Expectativa de vida ao longo dos anos em {country}",
              labels={"Life expectancy": "Expectativa de Vida", "Year": "Anos"})
st.plotly_chart(fig)

options = st.multiselect(
    "Escolha as an√°lises que deseja visualizar:",
    [
     "Doen√ßas por Regi√£o",
     "Correla√ß√£o entre PIB e Expectativa de Vida",
     "Impacto da Vacina√ß√£o na Expectativa de Vida"
    ]
)

if "Doen√ßas por Regi√£o" in options:
    st.subheader("Distribui√ß√£o de Doen√ßas por Regi√£o")

    disease_options = [
        "Hepatitis B", "Measles ", "Polio", "Diphtheria ", " HIV/AIDS", "infant deaths", "under-five deaths "
    ]
    disease = st.selectbox("Selecione uma doen√ßa para visualizar:", disease_options)

    df = df.dropna(subset=["Country", disease])  # Remove valores nulos na coluna de pa√≠s e da doen√ßa selecionada
    df["Country"] = df["Country"].astype(str)  # Garante que a coluna "Country" seja string

    valid_countries = px.data.gapminder()["country"].unique()
    df = df[df["Country"].isin(valid_countries)]  # Mant√©m apenas pa√≠ses v√°lidos

    if df.empty:
        st.warning("Nenhum dado v√°lido para exibir no mapa. Verifique os filtros aplicados.")
    else:
        fig = px.choropleth(
            df,
            locations="Country",
            locationmode="country names",
            color=disease,
            hover_name="Country",
            animation_frame="Year",
            color_continuous_scale="Reds",
            title=f"Distribui√ß√£o de {disease} ao longo dos anos"
        )
        st.plotly_chart(fig)

if "Correla√ß√£o entre PIB e Expectativa de Vida" in options:
    st.subheader("Correla√ß√£o entre PIB e Expectativa de Vida")
    fig = px.scatter(df, x="GDP", y="Life expectancy", trendline="ols",
                     title="Rela√ß√£o entre PIB e Expectativa de Vida",
                     labels={"GDP": "PIB", "Life expectancy": "Expectativa de Vida"})
    st.plotly_chart(fig)

if "Impacto da Vacina√ß√£o na Expectativa de Vida" in options:
    st.subheader("Impacto da Vacina√ß√£o na Expectativa de Vida")
    vaccine = st.selectbox("Selecione uma vacina:", ["Hepatitis B", "Polio", "Diphtheria"])
    fig = px.scatter(df, x=vaccine, y="Life expectancy", trendline="ols",
                     title=f"Rela√ß√£o entre {vaccine} e Expectativa de Vida",
                     labels={vaccine: "Taxa de Vacina√ß√£o (%)", "Life expectancy": "Expectativa de Vida"})
    st.plotly_chart(fig)

st.subheader("üìè Intervalo de Confian√ßa para Expectativa de Vida")

st.markdown("""
Os **intervalos de confian√ßa** s√£o usados para estimar um intervalo dentro do qual acreditamos que a **m√©dia real** da expectativa de vida se encontra.  

Isso nos ajuda a entender **a varia√ß√£o dos dados ao longo dos anos** e a fazer previs√µes mais seguras.  

Neste caso, utilizamos um **intervalo de confian√ßa de 95%**, ou seja, h√° **95% de chance da m√©dia real da expectativa de vida estar dentro desse intervalo**.  
""")

confidence_df = df.groupby("Year")["Life expectancy"].agg(["mean", "count", "std"]).reset_index()

confidence_df["sem"] = confidence_df["std"] / confidence_df["count"]**0.5

confidence_df["df"] = confidence_df["count"] - 1

confidence_df["lower"], confidence_df["upper"] = zip(*confidence_df.apply(
    lambda row: t.interval(0.95, row["df"], loc=row["mean"], scale=row["sem"]), axis=1))

fig = go.Figure()

# Linha da m√©dia
fig.add_trace(go.Scatter(x=confidence_df["Year"], y=confidence_df["mean"],
                         mode="lines", name="M√©dia", line=dict(color="blue")))

# Faixa do intervalo de confian√ßa
fig.add_trace(go.Scatter(x=confidence_df["Year"], y=confidence_df["upper"],
                         mode="lines", name="Limite Superior", line=dict(color="lightblue"), fill="tonexty"))
fig.add_trace(go.Scatter(x=confidence_df["Year"], y=confidence_df["lower"],
                         mode="lines", name="Limite Inferior", line=dict(color="lightblue"), fill="tonexty"))

# Configura√ß√£o do gr√°fico
fig.update_layout(title="üìä Intervalo de Confian√ßa (95%) da Expectativa de Vida",
                  xaxis_title="Ano", yaxis_title="Expectativa de Vida",
                  showlegend=True)

st.plotly_chart(fig)
